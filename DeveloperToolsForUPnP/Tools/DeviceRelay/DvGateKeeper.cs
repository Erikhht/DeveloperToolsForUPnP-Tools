using OpenSource.UPnP;

namespace UPnPRelay
{
    /// <summary>
    /// Transparent DeviceSide UPnP Service
    /// </summary>
    public class DvGateKeeper : IUPnPService
    {

        // Place your declarations above this line

        #region AutoGenerated Code Section [Do NOT Modify, unless you know what you're doing]
        //{{{{{ Begin Code Block

        private _DvGateKeeper _S;
        public static string URN = "urn:schemas-upnp-org:service:UPnPRelay:1";
        public double VERSION
        {
           get
           {
               return(double.Parse(_S.GetUPnPService().Version));
           }
        }

        public System.Boolean Reverse
        {
            get
            {
               return((System.Boolean)_S.GetStateVariable("Reverse"));
            }
            set
            {
               _S.SetStateVariable("Reverse", value);
            }
        }
        public System.String ErrorString
        {
            get
            {
               return((System.String)_S.GetStateVariable("ErrorString"));
            }
            set
            {
               _S.SetStateVariable("ErrorString", value);
            }
        }
        public System.String StateVariableName
        {
            get
            {
               return((System.String)_S.GetStateVariable("StateVariableName"));
            }
            set
            {
               _S.SetStateVariable("StateVariableName", value);
            }
        }
        public System.String ServiceID
        {
            get
            {
               return((System.String)_S.GetStateVariable("ServiceID"));
            }
            set
            {
               _S.SetStateVariable("ServiceID", value);
            }
        }
        public System.Byte[] Document
        {
            get
            {
               return((System.Byte[])_S.GetStateVariable("Document"));
            }
            set
            {
               _S.SetStateVariable("Document", value);
            }
        }
        public System.Byte[] Args
        {
            get
            {
               return((System.Byte[])_S.GetStateVariable("Args"));
            }
            set
            {
               _S.SetStateVariable("Args", value);
            }
        }
        public System.Int32 Handle
        {
            get
            {
               return((System.Int32)_S.GetStateVariable("Handle"));
            }
            set
            {
               _S.SetStateVariable("Handle", value);
            }
        }
        public System.Uri ProxyUri
        {
            get
            {
               return((System.Uri)_S.GetStateVariable("ProxyUri"));
            }
            set
            {
               _S.SetStateVariable("ProxyUri", value);
            }
        }
        public System.String ActionName
        {
            get
            {
               return((System.String)_S.GetStateVariable("ActionName"));
            }
            set
            {
               _S.SetStateVariable("ActionName", value);
            }
        }
        public System.String StateVariableValue
        {
            get
            {
               return((System.String)_S.GetStateVariable("StateVariableValue"));
            }
            set
            {
               _S.SetStateVariable("StateVariableValue", value);
            }
        }
        public System.String DeviceUDN
        {
            get
            {
               return((System.String)_S.GetStateVariable("DeviceUDN"));
            }
            set
            {
               _S.SetStateVariable("DeviceUDN", value);
            }
        }
        public System.Int32 ErrorCode
        {
            get
            {
               return((System.Int32)_S.GetStateVariable("ErrorCode"));
            }
            set
            {
               _S.SetStateVariable("ErrorCode", value);
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_Reverse
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Reverse")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Reverse")).Accumulator = value;
            }
        }
        public double ModerationDuration_Reverse
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Reverse")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Reverse")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_ErrorString
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ErrorString")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ErrorString")).Accumulator = value;
            }
        }
        public double ModerationDuration_ErrorString
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ErrorString")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ErrorString")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_StateVariableName
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("StateVariableName")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("StateVariableName")).Accumulator = value;
            }
        }
        public double ModerationDuration_StateVariableName
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("StateVariableName")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("StateVariableName")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_ServiceID
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ServiceID")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ServiceID")).Accumulator = value;
            }
        }
        public double ModerationDuration_ServiceID
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ServiceID")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ServiceID")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_Document
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Document")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Document")).Accumulator = value;
            }
        }
        public double ModerationDuration_Document
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Document")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Document")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_Args
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Args")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Args")).Accumulator = value;
            }
        }
        public double ModerationDuration_Args
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Args")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Args")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_Handle
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Handle")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Handle")).Accumulator = value;
            }
        }
        public double ModerationDuration_Handle
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Handle")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Handle")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_ProxyUri
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ProxyUri")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ProxyUri")).Accumulator = value;
            }
        }
        public double ModerationDuration_ProxyUri
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ProxyUri")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ProxyUri")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_ActionName
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ActionName")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ActionName")).Accumulator = value;
            }
        }
        public double ModerationDuration_ActionName
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ActionName")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ActionName")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_StateVariableValue
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("StateVariableValue")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("StateVariableValue")).Accumulator = value;
            }
        }
        public double ModerationDuration_StateVariableValue
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("StateVariableValue")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("StateVariableValue")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_DeviceUDN
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceUDN")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceUDN")).Accumulator = value;
            }
        }
        public double ModerationDuration_DeviceUDN
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceUDN")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("DeviceUDN")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_ErrorCode
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ErrorCode")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ErrorCode")).Accumulator = value;
            }
        }
        public double ModerationDuration_ErrorCode
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ErrorCode")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ErrorCode")).ModerationPeriod = value;
            }
        }
        public delegate void Delegate_Invoke(System.String DeviceUDN, System.String ServiceID, System.String Action, System.Byte[] InArgs, out System.Byte[] OutArgs);
        public delegate void Delegate_FireEvent(System.String DeviceUDN, System.String ServiceID, System.String StateVariable, System.String Value);
        public delegate void Delegate_AddDevice(System.String Sender, System.String DeviceUDN);
        public delegate void Delegate_InvokeAsync(System.String Caller, System.String DeviceUDN, System.String ServiceID, System.String Action, System.Byte[] InArgs, System.Int32 Handle);
        public delegate void Delegate_GetDocument(System.String DeviceUDN, System.String ServiceID, out System.Byte[] Document);
        public delegate void Delegate_InvokeAsyncResponse(System.Int32 Handle, System.Byte[] OutArgs, System.Int32 ErrorCode, System.String ErrorString);
        public delegate void Delegate_Register(System.Uri Proxy, System.Boolean Reverse);
        public delegate void Delegate_GetStateTable(System.String DeviceUDN, System.String ServiceID, out System.Byte[] Variables);
        public delegate void Delegate_RemoveDevice(System.String DeviceUDN);
        public delegate void Delegate_UnRegister(System.Uri Proxy);

        public Delegate_Invoke External_Invoke = null;
        public Delegate_FireEvent External_FireEvent = null;
        public Delegate_AddDevice External_AddDevice = null;
        public Delegate_InvokeAsync External_InvokeAsync = null;
        public Delegate_GetDocument External_GetDocument = null;
        public Delegate_InvokeAsyncResponse External_InvokeAsyncResponse = null;
        public Delegate_Register External_Register = null;
        public Delegate_GetStateTable External_GetStateTable = null;
        public Delegate_RemoveDevice External_RemoveDevice = null;
        public Delegate_UnRegister External_UnRegister = null;

        public void RemoveAction_Invoke()
        {
             _S.GetUPnPService().RemoveMethod("Invoke");
        }
        public void RemoveAction_FireEvent()
        {
             _S.GetUPnPService().RemoveMethod("FireEvent");
        }
        public void RemoveAction_AddDevice()
        {
             _S.GetUPnPService().RemoveMethod("AddDevice");
        }
        public void RemoveAction_InvokeAsync()
        {
             _S.GetUPnPService().RemoveMethod("InvokeAsync");
        }
        public void RemoveAction_GetDocument()
        {
             _S.GetUPnPService().RemoveMethod("GetDocument");
        }
        public void RemoveAction_InvokeAsyncResponse()
        {
             _S.GetUPnPService().RemoveMethod("InvokeAsyncResponse");
        }
        public void RemoveAction_Register()
        {
             _S.GetUPnPService().RemoveMethod("Register");
        }
        public void RemoveAction_GetStateTable()
        {
             _S.GetUPnPService().RemoveMethod("GetStateTable");
        }
        public void RemoveAction_RemoveDevice()
        {
             _S.GetUPnPService().RemoveMethod("RemoveDevice");
        }
        public void RemoveAction_UnRegister()
        {
             _S.GetUPnPService().RemoveMethod("UnRegister");
        }
        public System.Net.IPEndPoint GetCaller()
        {
             return(_S.GetUPnPService().GetCaller());
        }
        public System.Net.IPEndPoint GetReceiver()
        {
             return(_S.GetUPnPService().GetReceiver());
        }

        private class _DvGateKeeper
        {
            private DvGateKeeper Outer = null;
            private UPnPService S;
            internal _DvGateKeeper(DvGateKeeper n)
            {
                Outer = n;
                S = BuildUPnPService();
            }
            public UPnPService GetUPnPService()
            {
                return(S);
            }
            public void SetStateVariable(string VarName, object VarValue)
            {
               S.SetStateVariable(VarName,VarValue);
            }
            public object GetStateVariable(string VarName)
            {
               return(S.GetStateVariable(VarName));
            }
            protected UPnPService BuildUPnPService()
            {
                UPnPStateVariable[] RetVal = new UPnPStateVariable[12];
                RetVal[0] = new UPnPModeratedStateVariable("Reverse", typeof(System.Boolean), false);
                RetVal[0].AddAssociation("Register", "Reverse");
                RetVal[1] = new UPnPModeratedStateVariable("ErrorString", typeof(System.String), false);
                RetVal[1].AddAssociation("InvokeAsyncResponse", "ErrorString");
                RetVal[2] = new UPnPModeratedStateVariable("StateVariableName", typeof(System.String), false);
                RetVal[2].AddAssociation("FireEvent", "StateVariable");
                RetVal[3] = new UPnPModeratedStateVariable("ServiceID", typeof(System.String), false);
                RetVal[3].AddAssociation("Invoke", "ServiceID");
                RetVal[3].AddAssociation("FireEvent", "ServiceID");
                RetVal[3].AddAssociation("InvokeAsync", "ServiceID");
                RetVal[3].AddAssociation("GetDocument", "ServiceID");
                RetVal[3].AddAssociation("GetStateTable", "ServiceID");
                RetVal[4] = new UPnPModeratedStateVariable("Document", typeof(System.Byte[]), false);
                RetVal[4].AddAssociation("GetDocument", "Document");
                RetVal[5] = new UPnPModeratedStateVariable("Args", typeof(System.Byte[]), false);
                RetVal[5].AddAssociation("Invoke", "InArgs");
                RetVal[5].AddAssociation("Invoke", "OutArgs");
                RetVal[5].AddAssociation("InvokeAsync", "InArgs");
                RetVal[5].AddAssociation("InvokeAsyncResponse", "OutArgs");
                RetVal[5].AddAssociation("GetStateTable", "Variables");
                RetVal[6] = new UPnPModeratedStateVariable("Handle", typeof(System.Int32), false);
                RetVal[6].AddAssociation("InvokeAsync", "Handle");
                RetVal[6].AddAssociation("InvokeAsyncResponse", "Handle");
                RetVal[7] = new UPnPModeratedStateVariable("ProxyUri", typeof(System.Uri), false);
                RetVal[7].AddAssociation("Register", "Proxy");
                RetVal[7].AddAssociation("UnRegister", "Proxy");
                RetVal[8] = new UPnPModeratedStateVariable("ActionName", typeof(System.String), false);
                RetVal[8].AddAssociation("Invoke", "Action");
                RetVal[8].AddAssociation("InvokeAsync", "Action");
                RetVal[9] = new UPnPModeratedStateVariable("StateVariableValue", typeof(System.String), false);
                RetVal[9].AddAssociation("FireEvent", "Value");
                RetVal[10] = new UPnPModeratedStateVariable("DeviceUDN", typeof(System.String), false);
                RetVal[10].AddAssociation("Invoke", "DeviceUDN");
                RetVal[10].AddAssociation("FireEvent", "DeviceUDN");
                RetVal[10].AddAssociation("AddDevice", "Sender");
                RetVal[10].AddAssociation("AddDevice", "DeviceUDN");
                RetVal[10].AddAssociation("InvokeAsync", "Caller");
                RetVal[10].AddAssociation("InvokeAsync", "DeviceUDN");
                RetVal[10].AddAssociation("GetDocument", "DeviceUDN");
                RetVal[10].AddAssociation("GetStateTable", "DeviceUDN");
                RetVal[10].AddAssociation("RemoveDevice", "DeviceUDN");
                RetVal[11] = new UPnPModeratedStateVariable("ErrorCode", typeof(System.Int32), false);
                RetVal[11].AddAssociation("InvokeAsyncResponse", "ErrorCode");

                UPnPService S = new UPnPService(1, "UPNPRELAY_0-2", "urn:schemas-upnp-org:service:UPnPRelay:1", true, this);
                for(int i=0;i<RetVal.Length;++i)
                {
                   S.AddStateVariable(RetVal[i]);
                }
                S.AddMethod("Invoke");
                S.AddMethod("FireEvent");
                S.AddMethod("AddDevice");
                S.AddMethod("InvokeAsync");
                S.AddMethod("GetDocument");
                S.AddMethod("InvokeAsyncResponse");
                S.AddMethod("Register");
                S.AddMethod("GetStateTable");
                S.AddMethod("RemoveDevice");
                S.AddMethod("UnRegister");
                return(S);
            }

            public void Invoke(System.String DeviceUDN, System.String ServiceID, System.String Action, System.Byte[] InArgs, out System.Byte[] OutArgs)
            {
                if(Outer.External_Invoke != null)
                {
                    Outer.External_Invoke(DeviceUDN, ServiceID, Action, InArgs, out OutArgs);
                }
                else
                {
                    Sink_Invoke(DeviceUDN, ServiceID, Action, InArgs, out OutArgs);
                }
            }
            public void FireEvent(System.String DeviceUDN, System.String ServiceID, System.String StateVariable, System.String Value)
            {
                if(Outer.External_FireEvent != null)
                {
                    Outer.External_FireEvent(DeviceUDN, ServiceID, StateVariable, Value);
                }
                else
                {
                    Sink_FireEvent(DeviceUDN, ServiceID, StateVariable, Value);
                }
            }
            public void AddDevice(System.String Sender, System.String DeviceUDN)
            {
                if(Outer.External_AddDevice != null)
                {
                    Outer.External_AddDevice(Sender, DeviceUDN);
                }
                else
                {
                    Sink_AddDevice(Sender, DeviceUDN);
                }
            }
            public void InvokeAsync(System.String Caller, System.String DeviceUDN, System.String ServiceID, System.String Action, System.Byte[] InArgs, System.Int32 Handle)
            {
                if(Outer.External_InvokeAsync != null)
                {
                    Outer.External_InvokeAsync(Caller, DeviceUDN, ServiceID, Action, InArgs, Handle);
                }
                else
                {
                    Sink_InvokeAsync(Caller, DeviceUDN, ServiceID, Action, InArgs, Handle);
                }
            }
            public void GetDocument(System.String DeviceUDN, System.String ServiceID, out System.Byte[] Document)
            {
                if(Outer.External_GetDocument != null)
                {
                    Outer.External_GetDocument(DeviceUDN, ServiceID, out Document);
                }
                else
                {
                    Sink_GetDocument(DeviceUDN, ServiceID, out Document);
                }
            }
            public void InvokeAsyncResponse(System.Int32 Handle, System.Byte[] OutArgs, System.Int32 ErrorCode, System.String ErrorString)
            {
                if(Outer.External_InvokeAsyncResponse != null)
                {
                    Outer.External_InvokeAsyncResponse(Handle, OutArgs, ErrorCode, ErrorString);
                }
                else
                {
                    Sink_InvokeAsyncResponse(Handle, OutArgs, ErrorCode, ErrorString);
                }
            }
            public void Register(System.Uri Proxy, System.Boolean Reverse)
            {
                if(Outer.External_Register != null)
                {
                    Outer.External_Register(Proxy, Reverse);
                }
                else
                {
                    Sink_Register(Proxy, Reverse);
                }
            }
            public void GetStateTable(System.String DeviceUDN, System.String ServiceID, out System.Byte[] Variables)
            {
                if(Outer.External_GetStateTable != null)
                {
                    Outer.External_GetStateTable(DeviceUDN, ServiceID, out Variables);
                }
                else
                {
                    Sink_GetStateTable(DeviceUDN, ServiceID, out Variables);
                }
            }
            public void RemoveDevice(System.String DeviceUDN)
            {
                if(Outer.External_RemoveDevice != null)
                {
                    Outer.External_RemoveDevice(DeviceUDN);
                }
                else
                {
                    Sink_RemoveDevice(DeviceUDN);
                }
            }
            public void UnRegister(System.Uri Proxy)
            {
                if(Outer.External_UnRegister != null)
                {
                    Outer.External_UnRegister(Proxy);
                }
                else
                {
                    Sink_UnRegister(Proxy);
                }
            }

            public Delegate_Invoke Sink_Invoke;
            public Delegate_FireEvent Sink_FireEvent;
            public Delegate_AddDevice Sink_AddDevice;
            public Delegate_InvokeAsync Sink_InvokeAsync;
            public Delegate_GetDocument Sink_GetDocument;
            public Delegate_InvokeAsyncResponse Sink_InvokeAsyncResponse;
            public Delegate_Register Sink_Register;
            public Delegate_GetStateTable Sink_GetStateTable;
            public Delegate_RemoveDevice Sink_RemoveDevice;
            public Delegate_UnRegister Sink_UnRegister;
        }
        public DvGateKeeper()
        {
            _S = new _DvGateKeeper(this);
            _S.Sink_Invoke = new Delegate_Invoke(Invoke);
            _S.Sink_FireEvent = new Delegate_FireEvent(FireEvent);
            _S.Sink_AddDevice = new Delegate_AddDevice(AddDevice);
            _S.Sink_InvokeAsync = new Delegate_InvokeAsync(InvokeAsync);
            _S.Sink_GetDocument = new Delegate_GetDocument(GetDocument);
            _S.Sink_InvokeAsyncResponse = new Delegate_InvokeAsyncResponse(InvokeAsyncResponse);
            _S.Sink_Register = new Delegate_Register(Register);
            _S.Sink_GetStateTable = new Delegate_GetStateTable(GetStateTable);
            _S.Sink_RemoveDevice = new Delegate_RemoveDevice(RemoveDevice);
            _S.Sink_UnRegister = new Delegate_UnRegister(UnRegister);
        }
        public DvGateKeeper(string ID):this()
        {
            _S.GetUPnPService().ServiceID = ID;
        }
        public UPnPService GetUPnPService()
        {
            return(_S.GetUPnPService());
        }
        //}}}}} End of Code Block

        #endregion

        /// <summary>
        /// Action: Invoke
        /// </summary>
        /// <param name="DeviceUDN">Associated State Variable: DeviceUDN</param>
        /// <param name="ServiceID">Associated State Variable: ServiceID</param>
        /// <param name="Action">Associated State Variable: ActionName</param>
        /// <param name="InArgs">Associated State Variable: Args</param>
        /// <param name="OutArgs">Associated State Variable: Args</param>
        public void Invoke(System.String DeviceUDN, System.String ServiceID, System.String Action, System.Byte[] InArgs, out System.Byte[] OutArgs)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: FireEvent
        /// </summary>
        /// <param name="DeviceUDN">Associated State Variable: DeviceUDN</param>
        /// <param name="ServiceID">Associated State Variable: ServiceID</param>
        /// <param name="StateVariable">Associated State Variable: StateVariableName</param>
        /// <param name="Value">Associated State Variable: StateVariableValue</param>
        public void FireEvent(System.String DeviceUDN, System.String ServiceID, System.String StateVariable, System.String Value)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: AddDevice
        /// </summary>
        /// <param name="Sender">Associated State Variable: DeviceUDN</param>
        /// <param name="DeviceUDN">Associated State Variable: DeviceUDN</param>
        public void AddDevice(System.String Sender, System.String DeviceUDN)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: InvokeAsync
        /// </summary>
        /// <param name="Caller">Associated State Variable: DeviceUDN</param>
        /// <param name="DeviceUDN">Associated State Variable: DeviceUDN</param>
        /// <param name="ServiceID">Associated State Variable: ServiceID</param>
        /// <param name="Action">Associated State Variable: ActionName</param>
        /// <param name="InArgs">Associated State Variable: Args</param>
        /// <param name="Handle">Associated State Variable: Handle</param>
        public void InvokeAsync(System.String Caller, System.String DeviceUDN, System.String ServiceID, System.String Action, System.Byte[] InArgs, System.Int32 Handle)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetDocument
        /// </summary>
        /// <param name="DeviceUDN">Associated State Variable: DeviceUDN</param>
        /// <param name="ServiceID">Associated State Variable: ServiceID</param>
        /// <param name="Document">Associated State Variable: Document</param>
        public void GetDocument(System.String DeviceUDN, System.String ServiceID, out System.Byte[] Document)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: InvokeAsyncResponse
        /// </summary>
        /// <param name="Handle">Associated State Variable: Handle</param>
        /// <param name="OutArgs">Associated State Variable: Args</param>
        /// <param name="ErrorCode">Associated State Variable: ErrorCode</param>
        /// <param name="ErrorString">Associated State Variable: ErrorString</param>
        public void InvokeAsyncResponse(System.Int32 Handle, System.Byte[] OutArgs, System.Int32 ErrorCode, System.String ErrorString)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: Register
        /// </summary>
        /// <param name="Proxy">Associated State Variable: ProxyUri</param>
        /// <param name="Reverse">Associated State Variable: Reverse</param>
        public void Register(System.Uri Proxy, System.Boolean Reverse)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetStateTable
        /// </summary>
        /// <param name="DeviceUDN">Associated State Variable: DeviceUDN</param>
        /// <param name="ServiceID">Associated State Variable: ServiceID</param>
        /// <param name="Variables">Associated State Variable: Args</param>
        public void GetStateTable(System.String DeviceUDN, System.String ServiceID, out System.Byte[] Variables)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: RemoveDevice
        /// </summary>
        /// <param name="DeviceUDN">Associated State Variable: DeviceUDN</param>
        public void RemoveDevice(System.String DeviceUDN)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: UnRegister
        /// </summary>
        /// <param name="Proxy">Associated State Variable: ProxyUri</param>
        public void UnRegister(System.Uri Proxy)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
    }
}